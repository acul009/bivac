#!/bin/bash


# Prepare environment
test_valid=true
canary=8ft8HJ3teCg8S1WeH5bwhNBZEtBJNs
export AWS_ACCESS_KEY_ID=OBQZY3DV6VOEZ9PG6NIM
export AWS_SECRET_ACCESS_KEY=7e88XeX0j3YdB6b1o0zU2GhG0dX6tFMy3Haty
export RANCHER_URL=http://192.168.42.3:8080/v2-beta

sleep 240 # Let Rancher start

cat <<EOF > /tmp/test01-docker-compose.yml
---
version: '2'
services:
  canary:
    image: busybox
    volumes:
      - canary:/data
    command: ["sh", "-c", "echo $canary > /data/canary; mkdir -p /data/foo/bar; echo $canary > /data/foo/bar/canary;ls -la /data;echo $canary > /data/canary"]
    labels:
      io.rancher.container.start_once: true

  postgresql:
    image: postgres:latest
    volumes:
      - postgres:/var/lib/postgresql/data

  mysql:
    image: mysql
    volumes:
      - mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: foo
      MYSQL_USER: foo
      MYSQL_PASSWORD: bar
      MYSQL_ROOT_PASSWORD: root
EOF

rancher stack create --start -f /tmp/test01-docker-compose.yml services

sleep 60


# Start Bivac
cat <<EOF > /tmp/bivac-docker-compose.yml
---
version: '2'
services:
  bivac:
    image: $1
    environment:
      BIVAC_VOLUMES_WHITELIST: "canary,mysql,postgres"
      BIVAC_TARGET_URL: s3:http://192.168.42.3:9000/bivac-testing
      BIVAC_LOG_LEVEL: $2
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      RESTIC_PASSWORD: toto
    labels:
      io.rancher.container.start_once: 'true'
      io.rancher.container.agent.role: environmentAdmin
      io.rancher.container.create_agent: 'true'
EOF

bivac_stack=$(rancher stack create --start -s -f /tmp/bivac-docker-compose.yml bivac)

sleep 30

while [[ $(rancher inspect $bivac_stack | jq -r ".healthState") != "started-once" ]]; do
  sleep 10
done

rancher logs bivac

## Canaries
dump=$(docker run -it --rm -e RESTIC_PASSWORD=toto -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY restic/restic:latest -q -r s3:http://192.168.42.3:9000/bivac-testing/testing/canary dump latest /data/canary)
dump=${dump%$'\r'}
if [[ "$dump" != "$canary" ]]; then
  test_valid=false
fi

dump=$(docker run -it --rm -e RESTIC_PASSWORD=toto -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY restic/restic:latest -q -r s3:http://192.168.42.3:9000/bivac-testing/testing/canary dump latest /data/foo/bar/canary)
dump=${dump%$'\r'}
if [[ "$dump" != "$canary" ]]; then
  test_valid=false
fi

## MySQL
dump=$(docker run -it --rm -e RESTIC_PASSWORD=toto -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY restic/restic:latest -q -r s3:http://192.168.42.3:9000/bivac-testing/testing/mysql dump latest /var/lib/mysql/backups/all.sql)
dump=${dump%$'\r'}
if [[ $dump != *"Dump completed"* ]]; then
  test_valid=false
fi

# PostgreSQL
dump=$(docker run -it --rm -e RESTIC_PASSWORD=toto -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY restic/restic:latest -q -r s3:http://192.168.42.3:9000/bivac-testing/testing/postgres dump latest /var/lib/postgresql/data/backups/all.sql)
dump=${dump%$'\r'}
if [[ $dump != *"dump complete"* ]]; then
  test_valid=false
fi



if [ "$test_valid" = true ]; then
  echo -e "\e[32m[+] Basic : Cattle + Restic\e[39m"
else
  echo -e "\e[31m[-] Basic : Cattle + Restic\e[39m"
fi

# Clean up environment
#rancher volume rm canary
#rancher volume rm mysql
#rancher volume rm postgres
